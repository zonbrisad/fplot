#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------
#
#
#
# File:     fplot
# Author:   Peter Malmberg  <peter.malmberg@gmail.com>
# Org:
# Date:     2023-06-12
# License:
# Python:   >= 3.0
#
# ----------------------------------------------------------------------------
from argparse import (
    ArgumentParser,
    RawTextHelpFormatter,
    FileType,
    Namespace,
    RawDescriptionHelpFormatter,
)
import json
import logging
import re
import os
import sys  # We need sys so that we can pass argv to QApplication
import traceback
from dataclasses import dataclass
import math
from typing import Protocol

try:
    import pyqtgraph as pg
except ModuleNotFoundError:
    print("\nYou need library PyQtGraph to run this program.")
    print("\nTo install:")
    print(">pip install pyqtgraph\n")
    exit(0)

from PyQt6 import QtCore, QtWidgets


class App:
    NAME = "fplot"
    VERSION = "0.2"
    DESCRIPTION = "Realtime plot "
    LICENSE = ""
    COPYRIGHT = ""
    AUTHOR = "Peter Malmberg"
    EMAIL = "<peter.malmberg@gmail.com>"
    ORG = ""
    HOME = ""
    ICON = ""
    # defaults
    DATAPOINTS = 1000
    COLUMNS = 1
    INTERVAL = 1


class Def:
    DATAPOINTS = 1000
    COLUMNS = 1
    INTERVAL = 1000


class XPlot(Protocol):
    def update(self) -> None:
        pass

    def get_plot(self) -> pg.PlotWidget:
        pass


def get_val(file: str) -> float:
    if os.path.isfile(file):
        with open(file) as file_name:
            data = file_name.read()
            val = float(data)
            logging.debug(f"{file} {val}")
            return val


# pen = pg.mkPen(color=(255, 0, 100), width=1)
pen = pg.mkPen(color="#ff00ff", width=1)
pen2 = pg.mkPen(color="#4f004f", width=1)


@dataclass
class AvgFilter:
    len: int = 10

    def __post_init__(self):
        self.data = []

    def update(self, new_val: float) -> float:
        self.data.append(new_val)
        if len(self.data) > self.len:
            self.data.pop(0)

        return sum(self.data) / len(self.data)


# class SPlot_old:
#     def __init__(self, title="", datapoints=1000, divider=1, average=1):
#         self.title = title
#         self.datapoints = datapoints
#         self.divider = divider
#         self.average = average

#         self.filter = AvgFilter(self.average)

#         self.gw = pg.PlotWidget()
#         self.gw.setTitle(self.title)

#         self.x = list(range(self.datapoints))
#         self.y = [0 for _ in range(self.datapoints)]
#         self.line = self.gw.plot(self.x, self.y, pen=pen)

#     def update_plot(self, new_val):
#         val = self.filter.update(new_val)

#         self.x = self.x[1:]
#         self.x.append(self.x[-1] + 1)
#         self.y = self.y[1:]
#         self.y.append(val)
#         self.line.setData(self.x, self.y)

#     def get_plot(self) -> pg.PlotWidget:
#         return self.gw


class SimplePlot(pg.PlotWidget):
    def __init__(
        self, parent=None, title: str = "", datapoints: int = 1000, average: int = 1
    ):
        super().__init__(parent=parent, background="default", plotItem=None)
        self.datapoints = datapoints
        self.filter = AvgFilter(average)
        self.setTitle(title)

        self.x = list(range(self.datapoints))
        self.y = [0 for _ in range(self.datapoints)]
        self.line = self.plot(self.x, self.y, pen=pen)
        self.line2 = self.plot(self.x, self.y, pen=pen2)

        # self.setLabel("left", "aaa")
        # self.setLabel("bottom", "bbb")

    # def update(self):
    #     self.update_plot(self.node.value)

    def update_plot(self, new_val):
        val = self.filter.update(new_val)

        self.x = self.x[1:]
        self.x.append(self.x[-1] + 1)
        self.y = self.y[1:]
        self.y.append(val)
        self.line.setData(self.x, self.y)


class SPlot(SimplePlot):
    def __init__(
        self,
        parent=None,
        title: str = "",
        datapoints: int = 1000,
        average: int = 1,
        divider=1,
    ):
        super().__init__(parent, title, datapoints, average)
        self.divider = divider


class PidPlot(SPlot):
    pid: int = 0
    first_run: bool = True
    utime: int = 0
    stime: int = 0
    old_utime: int = 0
    old_stime: int = 0
    start_time: int = 0
    old_start_time: int = 0
    clk_tck: int = 100

    def __init__(
        self, pid=0, datapoints: int = 1000, title: str = "", divider=1, average=1
    ):
        super().__init__(
            title=f"pid {pid}",
            datapoints=datapoints,
            divider=divider,
            average=average,
        )
        self.pid = pid

        process = QtCore.QProcess()
        process.start("getconf CLK_TCK")
        process.waitForFinished()
        data = process.readAll()
        line = str(data, "utf-8")
        self.clk_tck = int(line)

    def update(self) -> None:
        with open(f"/proc/{self.pid}/stat") as file:
            line = file.read()

        line_s = line.split(" ")

        self.old_utime = self.utime
        self.old_stime = self.stime
        self.old_start_time = self.start_time

        #
        # /proc/<pid>/stat file information
        #
        # - https://www.baeldung.com/linux/total-process-cpu-usage
        # - man 5 proc

        # scheduled user mode time in clock ticks
        self.utime = int(line_s[13]) / self.clk_tck
        # scheduled kernel mode time in clock ticks
        self.stime = int(line_s[14]) / self.clk_tck
        self.start_time = int(line_s[21]) / self.clk_tck  #

        if self.first_run is True:
            self.old_utime = self.utime
            self.old_stime = self.stime
            self.old_start_time = self.start_time
            self.first_run = False

        val = (self.utime + self.stime - self.old_utime - self.old_stime) * 100
        logging.debug(line_s)
        self.update_plot(val)


class CPUPlot(SPlot):
    def __init__(self, title: str = "", datapoints: int = 1000, divider=1, average=1):
        super().__init__(
            title=title, datapoints=datapoints, average=average, divider=divider
        )
        self.old_vals = self.get_data()

    def get_data(self) -> list[int]:
        with open("/proc/stat") as file:
            line = file.readline().replace("\n", "").split(" ")
        vals = [int(x) for i, x in enumerate(line) if i >= 2]
        return vals

    def update(self):
        vals = self.get_data()
        difs = [(x - self.old_vals[i]) for i, x in enumerate(vals)]
        total = sum(difs)
        usage = difs[0] + difs[2]
        average = usage * 100 / total
        self.old_vals = vals
        self.update_plot(average)


class FilePlot(SPlot):
    def __init__(
        self,
        file_name: str = "",
        cmd: str = "",
        row: str = "1",
        col: int = 0,
        row_name: str = "",
        title: str = "",
        datapoints: int = 1000,
        divider=1,
        average=1,
    ) -> None:
        super().__init__(
            title=title, datapoints=datapoints, average=average, divider=divider
        )

        self.col = col
        self.file_name = file_name
        self.cmd = cmd

        self.process = QtCore.QProcess()

        if type(row) is int:
            self.row = row
            return

        if row.isnumeric():
            self.row = int(row)
        else:
            with open(self.file_name) as file:
                lines = [line for line in file]

            for i, line in enumerate(lines):
                if row in line:
                    break
            self.row = i + 1

    def get_line_val(self, row: int, col: int) -> float:
        if os.path.isfile(self.file_name):
            with open(self.file_name) as file:
                lines = file.readlines()
            line = lines[row - 1]
            d = line.split(" ")
            data = [x for x in d if x != ""]  # Remove empty strings
            logging.debug(data)
            # print(f"{col} {self.col} {data}")
            val = float(data[col - 1])
            logging.debug(f"{self.file_name} {val} {row} {col}")
            return val

    def update(self):
        if self.cmd != "":
            self.process.start(self.cmd)
            self.process.waitForFinished()
            data = self.process.readAll()

            lines = str(data, "utf-8").split("\n")
            columns = re.split(r" |\t", lines[self.row - 1])
            columns_c = [x for x in columns if x != ""]
            logging.debug(f"{self.col}  {self.row}")
            logging.debug(f"{columns_c}")
            new_val = float(columns_c[self.col - 1]) / self.divider
        else:
            new_val = self.get_line_val(self.row, self.col) / self.divider

        self.update_plot(new_val)


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, plots: list[XPlot], args: Namespace):
        super(MainWindow, self).__init__()

        self.plots = plots
        self.setWindowTitle(args.title)
        centralWidget = QtWidgets.QWidget(self)
        self.setCentralWidget(centralWidget)
        hbox = QtWidgets.QHBoxLayout(centralWidget)
        hbox.setSpacing(0)
        hbox.setContentsMargins(1, 1, 1, 1)

        # self.graphWidget.setBackground('w')
        vboxes: list[QtWidgets.QHBoxLayout] = []
        for i in range(args.columns):
            vbox = QtWidgets.QVBoxLayout()
            vbox.setSpacing(0)
            hbox.addLayout(vbox)
            vboxes.append(vbox)

        per = math.ceil(len(self.plots) / args.columns)
        for i, pl in enumerate(self.plots):
            vboxes[i // per].addWidget(pl)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):
        for plot in self.plots:
            plot.update()


def get_pos_arg_str(lst, i: int, default) -> str:
    if i < len(lst):
        return lst[i]
    else:
        return default


def get_pos_arg_float(lst, i: int, default) -> float:
    if i < len(lst):
        return float(lst[i])
    else:
        return default


def get_pos_arg_int(lst, i: int, default) -> int:
    if i < len(lst):
        return int(lst[i])
    else:
        return default


class Params:
    def __init__(self, param_string: str):
        self.params = param_string.split(":")

    def get_str(self, i, default):
        pass
        # params = p.split(":")
        # file_name = get_pos_arg_str(params, 0, "")
        # divider = get_pos_arg_float(params, 1, 1)


class JConf:
    def __init__(self, file):
        with file as infile:
            self.conf = json.load(infile)

    def get_param(self, param, default):
        if param in self.conf:
            return self.conf[param]
        return default


def get_param(conf, param, default):
    if param in conf:
        return conf[param]

    return default


epilog = f"""
Examples:\n

> fplot --plot /proc/loadavg:1:1:1:1
"""


def main() -> None:
    logging_format = "[%(levelname)s] %(lineno)d %(funcName)s() : %(message)s"

    parser = ArgumentParser(
        prog=App.NAME,
        description=App.DESCRIPTION,
        epilog=epilog,
        add_help=True,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument("--plot", action="append", default=[], help="Add another plot")
    parser.add_argument(
        "--plotrc", action="append", default=[], help="Add another plot row column"
    )
    parser.add_argument(
        "--plotexec",
        action="append",
        default=[],
        help="Add another plot via external command",
    )
    parser.add_argument(
        "--pid",
        action="append",
        default=[],
        help="Add pid plot",
    )
    parser.add_argument(
        "--process",
        action="append",
        default=[],
        help="Add a process to monitor",
    )
    parser.add_argument(
        "--cpu",
        action="store_true",
        default=[],
        help="Add CPU usage plot",
    )
    parser.add_argument(
        "--columns",
        action="store",
        default=Def.COLUMNS,
        type=int,
        help="Set number of columns",
    )
    parser.add_argument(
        "--datapoints",
        default=Def.DATAPOINTS,
        type=int,
        help="Set default nr of datapoints",
    )
    parser.add_argument(
        "--average",
        default=1,
        type=int,
        help="Set moving average filter",
    )
    parser.add_argument(
        "--interval", default=Def.INTERVAL, type=int, help="Set update interval (ms)"
    )
    parser.add_argument("--title", default="", type=str, help="Set window title")
    parser.add_argument(
        "--conf",
        action="append",
        default=[],
        type=FileType("r"),
        help="Fplot config file",
    )
    parser.add_argument(
        "--debug", action="store_true", default=False, help="Print debug messages"
    )
    parser.add_argument(
        "--version",
        action="version",
        version=f"{App.NAME} {App.VERSION}",
        help="Print version information",
    )
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(format=logging_format, level=logging.DEBUG)

    app = QtWidgets.QApplication(sys.argv)
    plots = []

    # Handle plot setup files
    for c in args.conf:
        with c as infile:
            conf = json.load(infile)

        args.title = get_param(conf, "title", args.title)
        args.columns = get_param(conf, "columns", args.columns)
        datapoints = get_param(conf, "datapoints", args.datapoints)

        pl = conf["plots"]
        for p in pl:
            if get_param(p, "file", "") == "cpu":
                cpu_plot = CPUPlot(
                    title=get_param(p, "title", ""),
                    datapoints=get_param(p, "datapoints", datapoints),
                    average=get_param(p, "average", args.average),
                )
                plots.append(cpu_plot)
                continue

            file_plot = FilePlot(
                file_name=get_param(p, "file", ""),
                cmd=get_param(p, "cmd", ""),
                title=get_param(p, "title", ""),
                divider=get_param(p, "divider", args.columns),
                datapoints=get_param(p, "datapoints", datapoints),
                row=get_param(p, "row", 1),
                col=get_param(p, "col", 1),
                average=get_param(p, "average", args.average),
            )
            logging.debug(file_plot)
            plots.append(file_plot)

    for p in args.plot:
        params = p.split(":")
        file_name = get_pos_arg_str(params, 0, "")
        divider = get_pos_arg_float(params, 1, 1)
        dp = get_pos_arg_int(params, 2, args.datapoints)
        average = get_pos_arg_int(params, 3, args.average)
        file_plot = FilePlot(
            file_name=file_name,
            title=file_name,
            divider=divider,
            datapoints=dp,
            row="1",
            col=1,
            average=average,
        )
        logging.debug(file_plot)
        plots.append(file_plot)

    for p in args.plotrc:
        params = p.split(":")
        file_name = get_pos_arg_str(params, 0, "")

        try:
            row = get_pos_arg_int(params, 1, 1)
            title = f"{file_name}:{row}"
        except ValueError:
            row_name = get_pos_arg_str(params, 1, "")
            title = f"{file_name}:{row_name}"
            with open(file_name) as file:
                lines = [line for line in file]

            for i, line in enumerate(lines):
                if row_name in line:
                    break
            row = i + 1
            logging.debug(f"Row {row}")

        col = get_pos_arg_int(params, 2, 1)
        divider = get_pos_arg_float(params, 3, 1)
        datapoints = get_pos_arg_int(params, 4, args.datapoints)
        average = get_pos_arg_int(params, 5, args.average)

        file_plot = FilePlot(
            file_name=file_name,
            title=title,
            divider=divider,
            datapoints=datapoints,
            row=row,
            col=col,
            average=average,
        )

        plots.append(file_plot)
        logging.debug(file_plot)

    for p in args.plotexec:
        params = p.split(":")
        cmd = get_pos_arg_str(params, 0, "")
        row = get_pos_arg_int(params, 1, 1)
        col = get_pos_arg_int(params, 2, 1)
        divider = get_pos_arg_float(params, 3, 1)
        datapoints = get_pos_arg_int(params, 4, args.datapoints)
        average = get_pos_arg_int(params, 5, args.average)

        title = f"{cmd} {row} {col}"
        file_plot = FilePlot(
            cmd=cmd,
            title=title,
            divider=divider,
            datapoints=datapoints,
            row=row,
            col=col,
            average=average,
        )
        plots.append(file_plot)
        logging.debug(file_plot)

    for pid in args.pid:
        pid_plot = PidPlot(pid=pid, datapoints=args.datapoints, average=args.average)
        plots.append(pid_plot)

    for proc in args.process:
        process = QtCore.QProcess()
        process.start(proc)
        pid_plot = PidPlot(
            pid=process.processId(), datapoints=args.datapoints, average=args.average
        )
        plots.append(pid_plot)
        file_plot = FilePlot(
            file_name=f"/proc/{process.processId()}/stat",
            title="Memory usage",
            divider=1024 * 1024,
            # datapoints=datapoints,
            row="1",
            col=23,
            # average=average,
        )
        plots.append(file_plot)

    if args.cpu:
        cpu_plot = CPUPlot(
            title="CPU (%)", datapoints=args.datapoints, average=args.average
        )
        plots.append(cpu_plot)

    main = MainWindow(plots, args)
    main.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt as e:  # Ctrl-C
        raise e
    except SystemExit as e:  # sys.exit()
        raise e
    except Exception as e:
        print("ERROR, UNEXPECTED EXCEPTION")
        print(str(e))
        traceback.print_exc()
        os._exit(1)
