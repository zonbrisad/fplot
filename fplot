#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------
#
#
#
# File:     fplot
# Author:   Peter Malmberg  <peter.malmberg@gmail.com>
# Org:
# Date:     2023-06-12
# License:
# Python:   >= 3.0
#
# ----------------------------------------------------------------------------
from argparse import (
    ArgumentParser,
    FileType,
    Namespace,
    RawDescriptionHelpFormatter,
)
import json
import logging
import re
import os
import sys  # We need sys so that we can pass argv to QApplication
import traceback
from dataclasses import dataclass
import math
from typing import Protocol
import psutil


from PyQt6 import QtCore, QtWidgets
from PyQt6.QtGui import QIcon

# from PyQt6.QtWidgets import QPushButton

try:
    import pyqtgraph as pg
except ModuleNotFoundError:
    print("\nYou need library PyQtGraph to run this program.")
    print("\nTo install:")
    print(">apt install python3-pyqtgraph")
    print("\nAlt:")
    print(">pip install pyqtgraph")
    exit(0)

# print(psutil.cpu_percent(interval=1, percpu=True))

# Absolute path to script itself
self_dir = os.path.abspath(os.path.dirname(sys.argv[0]))


class App:
    NAME = "fplot"
    VERSION = "0.2"
    DESCRIPTION = "Realtime plot "
    LICENSE = ""
    COPYRIGHT = ""
    AUTHOR = "Peter Malmberg"
    EMAIL = "<peter.malmberg@gmail.com>"
    ORG = ""
    HOME = ""
    ICON = f"{self_dir}/icon/fplot_128x128.png"


class Def:
    DATAPOINTS = 1000
    COLUMNS = 1
    INTERVAL = 1000


class XPlot(Protocol):
    """Plot interface"""

    def update(self) -> None: ...

    #    def get_plot(self) -> pg.PlotWidget: ...

    def xxx(self): ...


def get_val(file: str) -> float:
    if os.path.isfile(file):
        with open(file) as file_name:
            data = file_name.read()
            val = float(data)
            logging.debug(f"{file} {val}")
            return val


def rgb2str(r: int, g: int, b: int) -> str:
    return f"#{r:02x}{g:02x}{b:02x}"


PaletteVSCodeL = [
    rgb2str(0, 0, 0),
    rgb2str(205, 49, 49),
    rgb2str(13, 188, 121),
    rgb2str(229, 229, 16),
    rgb2str(36, 114, 200),
    rgb2str(188, 63, 188),
    rgb2str(17, 168, 205),
    rgb2str(229, 229, 229),
    rgb2str(102, 102, 102),
    rgb2str(241, 76, 76),
    rgb2str(35, 209, 139),
    rgb2str(245, 245, 67),
    rgb2str(59, 142, 234),
    rgb2str(214, 112, 214),
    rgb2str(41, 184, 219),
    rgb2str(229, 229, 229),
]

# pen = pg.mkPen(color=(255, 0, 100), width=1)
plot_pen = pg.mkPen(color="#ff00ff", width=1)
plot_pen = pg.mkPen(color=PaletteVSCodeL[9], width=1)
axis_pen = pg.mkPen(color=PaletteVSCodeL[7], width=1)


@dataclass
class ParamParser:
    """Parse parameters"""

    file_name: str = ""
    title: str = ""
    datapoints: int = 1000
    divider = 1
    row: int = 1
    col: int = 1
    average: int = 1
    cmd: str = ""
    row_name: str = ""
    pid: int = 0
    process: int = None
    param_string: str = ""

    def __post_init__(self) -> None:

        p = self.param_string.split("@")
        self.params = p[0].split(":")
        self.file_name = self.get_str(0, "")
        if len(p) > 1:
            self.title = p[1]
        else:
            self.title = self.file_name

    def get_str(self, pos: int, default: str) -> str:
        """Get string from position, return default if not found"""
        if pos < len(self.params):
            return self.params[pos]
        else:
            return default

    def get_int(self, pos: int, default: int) -> int:
        if pos < len(self.params):
            if self.params == "":
                return default
            try:
                return int(self.params[pos])
            except ValueError:
                return default
        else:
            return default

    def get_float(self, pos: int, default: float) -> float:
        if pos < len(self.params):
            if self.params == "":
                return default
            try:
                return float(self.params[pos])
            except ValueError:
                return default
        else:
            return default

    def plot(self) -> None:
        self.divider = self.get_float(1, 1)
        self.datapoints = self.get_int(2, self.datapoints)
        self.average = self.get_int(3, self.average)

    def plotf(self) -> None:
        self.col = self.get_int(1, 1)
        self.divider = self.get_float(2, 1)
        self.datapoints = self.get_int(3, self.datapoints)
        self.average = self.get_int(4, self.average)

    def plotrc(self) -> None:
        try:
            self.row = self.get_int(1, 1)
            if self.title == "":
                self.title = f"{self.file_name}:{self.row}"
        except ValueError:
            self.row_name = self.get_str(1, "")
            if self.title == "":
                self.title = f"{self.file_name}:{self.row_name}"

        self.col = self.get_int(2, 1)
        self.divider = self.get_float(3, 1)
        self.datapoints = self.get_int(4, self.datapoints)
        self.average = self.get_int(5, self.average)

        if self.title == "":
            self.title = f"{self.file_name}:{self.row}"


@dataclass
class AvgFilter:
    len: int = 10

    def __post_init__(self):
        self.data = []

    def update(self, new_val: float) -> float:
        self.data.append(new_val)
        if len(self.data) > self.len:
            self.data.pop(0)

        return sum(self.data) / len(self.data)


class SimplePlot(pg.PlotWidget):
    def __init__(
        self,
        parent=None,
        title: str = "",
        datapoints: int = 1000,
        average: int = 1,
        divider: int = 1,
        virtual: bool = False,
    ):
        super().__init__(parent=parent, background="default", plotItem=None)
        self.virtual = virtual
        self.datapoints = datapoints
        self.divider = divider
        self.filter = AvgFilter(average)
        self.setTitle(title)

        self.x = list(range(self.datapoints))
        self.y = [0 for _ in range(self.datapoints)]
        self.line = self.plot(self.x, self.y, pen=plot_pen)

        # self.line2 = self.plot(self.x, self.y, pen=pen2)

        self.getAxis("bottom").setPen(axis_pen)
        self.getAxis("left").setPen(axis_pen)
        # self.getAxis("right").setPen(plot_pen)
        # self.getAxis("top").setPen(plot_pen)

        # self.setLabel("left", "aaa")
        # self.setLabel("bottom", "bbb")

    def update_plot(self, new_val):
        val = self.filter.update(new_val)

        self.x = self.x[1:]
        self.x.append(self.x[-1] + 1)
        self.y = self.y[1:]
        self.y.append(val)
        self.line.setData(self.x, self.y)

    def get_widgets(self) -> list[pg.PlotWidget]:
        """Return plot widgets"""
        return [self]


class Plots:
    def __init__(self):
        self.plots: list[XPlot] = []

    def add_plot(self, plot: XPlot) -> None:
        self.plots.append(plot)

    def update(self) -> None:
        for plot in self.plots:
            plot.update()

    def get_widgets(self) -> list[pg.PlotWidget]:
        """Return plot widgets"""
        widgets = []
        for plot in self.plots:
            widgets.extend(plot.get_widgets())
        return widgets

    def __iter__(self):
        self.index = 0
        return self

    def __next__(self) -> XPlot:
        if self.index >= len(self.plots):
            raise StopIteration
        self.index += 1
        return self.plots[self.index - 1]


class PidPlot(SimplePlot):
    """Plot CPU usage for a specific process"""

    def __init__(
        self,
        pid: int = 0,
        datapoints: int = 1000,
        divider: int = 1,
        average: int = 1,
    ):
        self.pid = pid
        self.process = psutil.Process(self.pid)
        self.process.name()
        super().__init__(
            title=f'pid {pid} "{self.process.name()}" (%)',
            datapoints=datapoints,
            divider=divider,
            average=average,
        )

    def update(self) -> None:
        """Update plot with new value"""

        if psutil.pid_exists(self.pid) is False:
            logging.error(f"PID {self.pid} does not exist")
            return

        self.update_plot(self.process.cpu_percent())

    def __str__(self) -> str:
        return f"PidPlot {self.pid}"


class CPUPlot(SimplePlot):
    """Plot CPU usage"""

    def __init__(
        self,
        title: str = "",
        datapoints: int = 1000,
        divider=1,
        average=1,
    ):
        super().__init__(
            title=title, datapoints=datapoints, average=average, divider=divider
        )

    def update(self, value=None) -> None:
        """Update plot with new value"""

        if value is None:
            self.update_plot(psutil.cpu_percent(percpu=False))
        else:
            self.update_plot(value)

    def __str__(self) -> str:
        return "CPUPlot"


class CPUPlotI:
    """Plot CPU usage for each core"""

    def __init__(
        self,
        datapoints: int = 1000,
        divider=1,
        average=1,
    ):

        self.plots = []
        for x in range(psutil.cpu_count()):
            self.plots.append(
                CPUPlot(
                    title=f"CPU{x} (%)",
                    datapoints=datapoints,
                    average=average,
                    divider=divider,
                )
            )

    def update(self) -> None:
        """Update plot with new value"""
        cpu_state = psutil.cpu_percent(percpu=True)

        for i, plot in enumerate(self.plots):
            plot.update(cpu_state[i])

    def get_widgets(self) -> list[pg.PlotWidget]:
        """Return plot widgets"""
        plot_list = []
        for plot in self.plots:
            plot_list.extend(plot.get_widgets())
        return plot_list

    def __str__(self) -> str:
        return "CPUPlot"


class FilePlot(SimplePlot):
    """Plot data from a file"""

    def __init__(
        self,
        params: ParamParser,
    ) -> None:
        super().__init__(
            title=params.title,
            datapoints=params.datapoints,
            average=params.average,
            divider=params.divider,
        )

        self.col = params.col
        self.file_name = params.file_name

        if type(params.row) is int:
            self.row = params.row
            return

        if params.row.isnumeric():
            self.row = int(params.row)
        else:
            with open(self.file_name) as file:
                lines = [line for line in file]

            for i, line in enumerate(lines):
                if params.row in line:
                    break
            self.row = i + 1

    def get_line_val(self, row: int, col: int) -> float:
        """Get value from a specific row and column in a file"""

        try:
            with open(self.file_name) as file:
                lines = file.readlines()
        except FileNotFoundError:
            logging.error(f"File not found: {self.file_name}")
            return 0

        line = lines[row - 1].replace("\n", "")
        columns = line.split(" ")

        # Remove empty strings
        columns = [column for column in columns if column != ""]

        try:
            column = columns[col - 1]
            val = float(column) / self.divider
            logging.debug(f"{self.file_name} {val} {row} {col}")
        except IndexError:
            logging.error(f'Failed to get column {col} in line: "{line}" {columns}')
            return 0
        except ValueError:  # If value is not a number
            logging.error(f'Failed to convert "{column}" to value, in line: "{line}"')
            val = 0

        return val

    def update(self):
        """Update plot with new value"""

        val = self.get_line_val(self.row, self.col)
        self.update_plot(val)

    def __str__(self) -> str:
        return f"FilePlot {self.file_name} {self.row} {self.col}"


class FilePlotR(SimplePlot):
    """Plot data from a file"""

    def __init__(self, params: ParamParser) -> None:
        super().__init__(
            title=params.title,
            datapoints=params.datapoints,
            average=params.average,
            divider=params.divider,
        )

        self.col = params.col
        self.file_name = params.file_name
        try:
            self.file = open(self.file_name)
        except FileNotFoundError:
            logging.error(f"File not found: {self.file_name}")

    def get_line_val(self, col: int) -> float:
        """Get value from a specific row and column in a file"""

        try:
            line = self.file.readline()
        except FileNotFoundError:
            logging.error(f"File not found: {self.file_name}")
            return 0
        except EOFError:
            logging.error(f"End of file: {self.file_name}")
            return 0

        if line == "":
            return 0

        columns = line.split(" ")
        # Remove empty strings
        columns = [column for column in columns if column != ""]
        try:
            column = columns[col - 1]
            val = float(column) / self.divider
            logging.debug(f"{self.file_name} {val} {col}")
        except IndexError:
            logging.error(f'Failed to get column {col} in line: "{line}" {columns}')
            val = 0
        except ValueError:  # If value is not a number
            logging.error(f'Failed to convert "{column}" to value, in line: "{line}"')
            val = 0
        return val

    def update(self):
        """Update plot with new value"""

        val = self.get_line_val(self.col)
        self.update_plot(val)

    def __str__(self) -> str:
        return f"FilePlot {self.file_name} {self.row} {self.col}"


class ProcessPlot(SimplePlot):
    """Plot data from a process"""

    def __init__(
        self,
        file_name: str = "",
        cmd: str = "",
        row: str = "1",
        col: int = 0,
        row_name: str = "",
        title: str = "",
        datapoints: int = 1000,
        divider=1,
        average=1,
    ) -> None:
        super().__init__(
            title=title, datapoints=datapoints, average=average, divider=divider
        )

        self.col = col
        self.file_name = file_name
        self.cmd = cmd

        self.process = QtCore.QProcess()

    def update(self):
        """Update plot with new value"""

        self.process.start(self.cmd)
        self.process.waitForFinished()
        data = self.process.readAll()

        lines = str(data, "utf-8").split("\n")
        line = lines[self.row - 1]
        columns = re.split(r" |\t", line)
        # remove empty strings
        columns = [x for x in columns if x != ""]
        column = columns[self.col - 1]

        try:
            val = float(column) / self.divider
            logging.debug(f"Exec: {self.cmd}  {self.col} {self.row}")
        except ValueError:
            logging.error(f'Failed to convert "{column}" to value, in line: "{line}"')
            val = 0

        self.update_plot(val)

    def __str__(self) -> str:
        return f"FilePlot {self.file_name} {self.row} {self.col}"


class MainWindow(QtWidgets.QMainWindow):
    """Main window for fplot"""

    def __init__(self, plotwidgets: Plots, args: Namespace):
        super(MainWindow, self).__init__()

        self.plots = plotwidgets
        self.setWindowTitle(args.title)
        self.setWindowIcon(QIcon(App.ICON))
        centralWidget = QtWidgets.QWidget(self)
        self.setCentralWidget(centralWidget)
        self.vbox = QtWidgets.QVBoxLayout(centralWidget)
        self.vbox.setContentsMargins(0, 0, 0, 0)

        # hbox = QtWidgets.QHBoxLayout(centralWidget)
        hbox = QtWidgets.QHBoxLayout()
        hbox.setSpacing(0)
        hbox.setContentsMargins(0, 0, 0, 0)
        self.vbox.addLayout(hbox)

        # button = QPushButton("Quit", self)
        # self.vbox.addWidget(button)
        # self.graphWidget.setBackground('w')

        vboxes: list[QtWidgets.QHBoxLayout] = []
        for i in range(args.columns):
            vbox = QtWidgets.QVBoxLayout()
            vbox.setSpacing(0)
            hbox.addLayout(vbox)
            vboxes.append(vbox)

        plotwidgets = self.plots.get_widgets()
        per = math.ceil(len(plotwidgets) / args.columns)
        for i, widget in enumerate(plotwidgets):
            vboxes[i // per].addWidget(widget)

        self.timer = QtCore.QTimer()
        self.timer.setInterval(args.interval)
        self.timer.timeout.connect(self.update_plot_data)
        self.timer.start()

    def update_plot_data(self):
        self.plots.update()


class JConf:
    def __init__(self, file):
        with file as infile:
            self.conf = json.load(infile)

    def get_param(self, param, default):
        if param in self.conf:
            return self.conf[param]
        return default


def get_param(conf, param, default):
    if param in conf:
        return conf[param]

    return default


epilog = f"""
Examples:\n

> fplot --plot /sys/class/hwmon/hwmon0/temp1_input:1000
> fplot --plotrc /proc/meminfo:MemFree:2:1000:1
> fplot --plotrc /proc/meminfo:2:2:1000
"""


def main() -> None:
    logging_format = "[%(levelname)s] %(lineno)d %(funcName)s() : %(message)s"

    parser = ArgumentParser(
        prog=App.NAME,
        description=App.DESCRIPTION,
        epilog=epilog,
        add_help=True,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--plot",
        action="append",
        default=[],
        help="Add file plot",
        # metavar="file:div:pts:avg",
        metavar="FILE:DIV:PTS:AVG",
    )
    parser.add_argument(
        "--plotrc",
        action="append",
        default=[],
        help="Add file plot row column",
        metavar="FILE:ROW:COL:DIV:PTS:AVG",
    )
    # parser.add_argument(
    #     "--plotexec",
    #     action="append",
    #     default=[],
    #     help="Add plot via external command",
    #     metavar="CMD:ROW:COL:DIV:PTS:AVG",
    # )
    parser.add_argument(
        "--plotpid",
        action="append",
        default=[],
        help="Add pid plot",
    )
    parser.add_argument(
        "--plotf",
        action="append",
        default=[],
        help="Add plot from file",
        metavar="FILE",
    )
    # parser.add_argument(
    #     "--process",
    #     action="append",
    #     default=[],
    #     help="Add a process to monitor",
    # )
    parser.add_argument(
        "--plotcpu",
        action="store_true",
        default=[],
        help="Add CPU usage plot",
    )
    parser.add_argument(
        "--plotcpui",
        action="store_true",
        default=[],
        help="Add CPU usage plot, all individual cores",
    )
    parser.add_argument(
        "--columns",
        action="store",
        default=Def.COLUMNS,
        type=int,
        help="Set number of columns",
        metavar="N",
    )
    parser.add_argument(
        "--datapoints",
        default=Def.DATAPOINTS,
        type=int,
        help="Set default nr of datapoints",
        metavar="N",
    )
    parser.add_argument(
        "--average",
        default=1,
        type=int,
        help="Set moving average filter",
        metavar="N",
    )
    parser.add_argument(
        "--interval",
        default=Def.INTERVAL,
        type=int,
        help="Set update interval (ms)",
        metavar="N",
    )
    parser.add_argument("--title", default="", type=str, help="Set window title")
    parser.add_argument(
        "--conf",
        action="append",
        default=[],
        type=FileType("r"),
        help="Fplot config file",
        metavar="FILE",
    )
    parser.add_argument(
        "--debug", action="store_true", default=False, help="Print debug messages"
    )
    parser.add_argument(
        "--version",
        action="version",
        version=f"{App.NAME} {App.VERSION}",
        help="Print version information",
    )
    args = parser.parse_args()

    # print(args)
    # params = ParamParser(
    #     param_string=args.plot[0], average=args.average, datapoints=args.datapoints
    # )
    # print(params)
    # exit(0)

    if args.debug:
        logging.basicConfig(format=logging_format, level=logging.DEBUG)
    else:
        logging.basicConfig(format=logging_format)

    app = QtWidgets.QApplication(sys.argv)

    plot_list = Plots()

    # Handle plot setup files
    for c in args.conf:
        with c as infile:
            conf = json.load(infile)

        args.title = get_param(conf, "title", args.title)
        args.columns = get_param(conf, "columns", args.columns)
        datapoints = get_param(conf, "datapoints", args.datapoints)

        for plotarg in conf["plots"]:
            if get_param(plotarg, "file", "") == "cpu":
                cpu_plot = CPUPlot(
                    title=get_param(plotarg, "title", ""),
                    datapoints=get_param(plotarg, "datapoints", datapoints),
                    average=get_param(plotarg, "average", args.average),
                )
                plot_list.add_plot(cpu_plot)
                continue

            file_plot = FilePlot(
                file_name=get_param(plotarg, "file", ""),
                cmd=get_param(plotarg, "cmd", ""),
                title=get_param(plotarg, "title", ""),
                divider=get_param(plotarg, "divider", args.columns),
                datapoints=get_param(plotarg, "datapoints", datapoints),
                row=get_param(plotarg, "row", 1),
                col=get_param(plotarg, "col", 1),
                average=get_param(plotarg, "average", args.average),
            )
            logging.debug(file_plot)
            plot_list.add_plot(file_plot)

    for plotarg in args.plot:
        params = ParamParser(
            param_string=plotarg,
            average=args.average,
            datapoints=args.datapoints,
        )
        params.plot()

        plot_list.add_plot(
            FilePlot(
                params=params,
            )
        )

    for plotarg in args.plotrc:
        params = ParamParser(
            param_string=plotarg,
            average=args.average,
            datapoints=args.datapoints,
        )
        params.plotrc()

        plot_list.add_plot(
            FilePlot(
                params=params,
            )
        )

    for plotarg in args.plotf:
        params = ParamParser(
            param_string=plotarg,
            average=args.average,
            datapoints=args.datapoints,
        )
        params.plotf()
        plot_list.add_plot(FilePlotR(params=params))

    # for plotarg in args.plotexec:
    #     params = ParamSpliter(plotarg)
    #     cmd = params.get_str(0, "")
    #     row = params.get_int(1, 1)
    #     col = params.get_int(2, 1)
    #     divider = params.get_float(3, 1)
    #     datapoints = params.get_int(4, args.datapoints)
    #     average = params.get_int(5, args.average)

    #     title = f"{cmd} {row} {col}"
    #     file_plot = FilePlot(
    #         cmd=cmd,
    #         title=title,
    #         divider=divider,
    #         datapoints=datapoints,
    #         row=row,
    #         col=col,
    #         average=average,
    #     )
    #     plot_list.append(file_plot)
    #     logging.debug(file_plot)

    for pid in args.plotpid:
        if psutil.pid_exists(int(pid)) is False:
            logging.error(f"PID {pid} does not exist")
            continue
        plot_list.add_plot(
            PidPlot(pid=int(pid), datapoints=args.datapoints, average=args.average)
        )

    # for proc in args.process:
    #     process = QtCore.QProcess()
    #     process.start(proc)
    #     pid_plot = PidPlot(
    #         pid=process.processId(), datapoints=args.datapoints, average=args.average
    #     )
    #     plots.append(pid_plot)
    #     file_plot = FilePlot(
    #         file_name=f"/proc/{process.processId()}/stat",
    #         title="Memory usage",
    #         divider=1024 * 1024,
    #         # datapoints=datapoints,
    #         row="1",
    #         col=23,
    #         # average=average,
    #     )
    #     plots.append(file_plot)

    if args.plotcpu:
        plot_list.add_plot(
            CPUPlot(title="CPU (%)", datapoints=args.datapoints, average=args.average)
        )

    if args.plotcpui:
        plot_list.add_plot(
            CPUPlotI(
                datapoints=args.datapoints,
                average=args.average,
            )
        )

    if len(plot_list.plots) == 0:
        # logging.error("No plots defined")
        parser.print_help()
        return 1

    for plotarg in plot_list.plots:
        logging.debug(plotarg)

    main = MainWindow(plot_list, args)
    main.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt as e:  # Ctrl-C
        raise e
    except SystemExit as e:  # sys.exit()
        raise e
    except Exception as e:
        print("ERROR, UNEXPECTED EXCEPTION")
        print(str(e))
        traceback.print_exc()
        os._exit(1)
